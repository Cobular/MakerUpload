{"version":3,"file":"firestore.mjs","sources":["../../src/types/firestore.ts","../../src/firestore/firebase_token.ts","../../src/firestore/firestore.ts"],"sourcesContent":["import { TargetMachine } from \"./index\";\n\nexport interface DocumentData {\n  creation_time: Date;\n  download_url: string;\n  target_machine: TargetMachine;\n  name: string;\n  uid: string;\n}\n\nexport interface RawDocumentData {\n  creation_time: {\n    timestampValue: string;\n  };\n  download_url: {\n    stringValue: string;\n  };\n  target_machine: {\n    stringValue: TargetMachine;\n  };\n  uid: {\n    stringValue: string;\n  };\n  name: {\n    stringValue: string;\n  }\n}\nexport interface FirestoreDocument {\n  name: string;\n  fields: RawDocumentData;\n  createTime: string;\n  updateTime?: string;\n}\n\n\nexport function IsDocument(value: unknown): value is DocumentData {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"creation_time\" in value &&\n    \"download_url\" in value\n  );\n}\n\nexport function IsRawDocument(value: unknown): value is RawDocumentData {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"creation_time\" in value &&\n    \"download_url\" in value &&\n    \"target_machine\" in value\n  );\n}\n\nexport function IsFirestoreDocument(\n  value: unknown\n): value is FirestoreDocument {\n  return (\n    typeof value === \"object\" &&\n    value !== null &&\n    \"name\" in value &&\n    \"fields\" in value &&\n    IsRawDocument(value.fields)\n  );\n}\n\nexport function IsFirestoreDocumentList(\n  value: unknown\n): value is FirestoreDocument[] {\n  return (\n    Array.isArray(value) && value.every((item) => IsFirestoreDocument(item))\n  );\n}\n","import { getTokenFromGCPServiceAccount } from '@sagi.io/workers-jwt'\n\n\nexport interface JWT {\n  access_token: string;\n}\n\nexport function IsJWT(value: unknown): value is JWT {\n  return typeof value === \"object\" && value !== null && \"access_token\" in value;\n}\n\n// For example's sake, the file contents (modified) from the private key has been \n// listed below, but the recommended way would be to use environment variables.\nexport async function getAccessToken(auth_json: string): Promise<JWT> {\n  const jwtToken = await getTokenFromGCPServiceAccount({\n    serviceAccountJSON: JSON.parse(auth_json),\n    aud: 'https://oauth2.googleapis.com/token',\n    payloadAdditions: {\n      scope: [\n        // scope required for firestore\n        'https://www.googleapis.com/auth/datastore',\n        // The following scopes are required only for realtime database\n        // 'https://www.googleapis.com/auth/userinfo.email',\n        // 'https://www.googleapis.com/auth/firebase.database',\n      ].join(' '),\n    },\n  })\n\n  const accessToken = await (\n    await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n        assertion: jwtToken, // the JWT token generated in the previous step\n      }),\n    })\n  ).json()\n\n  if (!IsJWT(accessToken)) {\n    console.log(\"Invalid access token\", accessToken);\n    throw new Error('Invalid access token')\n  }\n\n  return accessToken\n}","import {\n  DocumentData,\n  FirestoreDocument,\n  IsFirestoreDocument,\n  IsFirestoreDocumentList,\n  RawDocumentData,\n} from \"../types/index\";\nimport { getAccessToken } from \"./firebase_token\";\n\n/**\n * Get all documents in a collection\n */\nexport class FirestoreInterface {\n  constructor(\n    private accessToken: string,\n    private projectId: string,\n    private log_func: (msg: string) => void,\n    private error_func: (msg: string) => void\n  ) {}\n\n  static async New<T>(\n    projectId: string,\n    auth_json: string,\n    log_func: (msg: string) => void = console.log,\n    error_func: (msg: string) => void = console.error\n  ): Promise<FirestoreInterface> {\n    const accessToken = await getAccessToken(auth_json);\n    return new FirestoreInterface(accessToken.access_token, projectId, log_func, error_func);\n  }\n\n  async getCollection(collection_name: string): Promise<FirestoreDocument[]> {\n    const fetch_res = await fetch(\n      `https://firestore.googleapis.com/v1/projects/${this.projectId}/databases/(default)/documents/${collection_name}`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + this.accessToken,\n        },\n      }\n    );\n\n    if (!fetch_res.ok) {\n      this.error_func(`Invalid response ${fetch_res}`);\n      throw new Error(\"Invalid response\");\n    }\n\n    const response = await fetch_res.json();\n\n    if (Object.keys(response).length === 0) {\n      return [];\n    }\n\n    if (!IsFirestoreDocumentList(response.documents)) {\n      this.error_func(`Invalid response ${response}`);\n      throw new Error(\"Invalid response\");\n    }\n\n    return response.documents;\n  }\n\n  /**\n   * Get a single document in a collection.\n   */\n  async getDocument(\n    collection_name: string,\n    docID: string\n  ): Promise<FirestoreDocument> {\n    const fetch_res = await fetch(\n      `https://firestore.googleapis.com/v1/projects/${this.projectId}/databases/(default)/documents/${collection_name}/${docID}`,\n      {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + this.accessToken,\n        },\n      }\n    );\n\n    if (!fetch_res.ok) {\n      this.error_func(`Invalid response ${fetch_res}`);\n      throw new Error(\"Invalid response\");\n    }\n\n    const response = await fetch_res.json();\n\n    if (!IsFirestoreDocument(response)) {\n      this.error_func(`Invalid response ${response}`);\n      throw new Error(\"Invalid response\");\n    }\n\n    return response;\n  }\n\n  /**\n   * Create a new document in a collection.\n   */\n  async addDocumentInCollection(\n    collection_name: string,\n    {\n      download_url,\n      target_machine,\n      creation_time = new Date(),\n      uid,\n      name,\n    }: DocumentData\n  ) {\n    const body: RawDocumentData = {\n      creation_time: {\n        timestampValue: creation_time.toISOString(),\n      },\n      download_url: {\n        stringValue: download_url,\n      },\n      target_machine: {\n        stringValue: target_machine,\n      },\n      uid: {\n        stringValue: uid,\n      },\n      name: {\n        stringValue: name,\n      },\n    };\n\n    const fetch_res = await fetch(\n      `https://firestore.googleapis.com/v1/projects/${this.projectId}/databases/(default)/documents/${collection_name}`,\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: \"Bearer \" + this.accessToken,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ fields: body }),\n      }\n    );\n\n    if (!fetch_res.ok) {\n      this.error_func(`Invalid response ${fetch_res}`);\n      throw new Error(await fetch_res.text());\n    }\n\n    const fetch_json = await fetch_res.json();\n\n    return fetch_json;\n  }\n\n  /**\n   * Delete a single document in a collection.\n   */\n  async deleteDocumentInCollectionRaw(path: string) {\n    const url = `https://firestore.googleapis.com/v1/${path}`;\n\n    this.log_func(`Delete url: ${url}`);\n\n    try {\n      const fetch_res = await fetch(url, {\n        method: \"DELETE\",\n        headers: {\n          Authorization: \"Bearer \" + this.accessToken,\n        },\n      });\n\n      this.log_func(`Delete response ${fetch_res}`);\n\n      if (!fetch_res.ok) {\n        this.error_func(`Invalid response ${fetch_res}`);\n        throw new Error(await fetch_res.text());\n      }\n\n      const fetch_json = await fetch_res.json();\n\n      return fetch_json;\n    } catch (e) {\n      this.log_func(`Error deleting document ${e}`);\n      throw e;\n    }\n  }\n\n  /**\n   * Delete a single document in a collection.\n   */\n  async deleteDocumentInCollection(collection_name: string, docID: string) {\n    const url = `https://firestore.googleapis.com/v1/projects/${this.projectId}/databases/(default)/documents/${collection_name}/${docID}`;\n\n    return this.deleteDocumentInCollectionRaw(url);\n  }\n}\n"],"names":[],"mappings":"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"}